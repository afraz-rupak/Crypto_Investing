================================================================================
BITCOIN PRICE PREDICTION API - GITHUB REPOSITORY
================================================================================

Repository URL: https://github.com/afraz-rupak/Crypto_Investing


================================================================================
PROJECT OVERVIEW
================================================================================

This project provides a Machine Learning-based REST API for predicting Bitcoin's
HIGH price for the next trading day. The API uses a Return-Based RandomForest
model trained on 2 years of historical Bitcoin price data with 31 engineered
features including technical indicators and price patterns.

Key Features:
- Real-time Bitcoin price predictions
- Return-based prediction model (predicts % change, converts to price)
- 81.5% accuracy (R² = 0.815)
- 31 engineered features (lag features, moving averages, RSI, volatility)
- RESTful API with FastAPI framework
- Docker containerization support
- Automated data fetching from Yahoo Finance

================================================================================
MODEL DETAILS
================================================================================

Algorithm: RandomForest Regressor (Return-Based)
Prediction Type: Percentage return, converted to absolute price
Target Variable: Next day's HIGH price
Training Data: 2 years of daily Bitcoin OHLC data (730+ days)
Test Performance:
  - R² Score: 0.815 (81.5% variance explained)
  - RMSE: ~$1,786 (on return-based predictions)
  - MAE: ~$1,200

Features (31 total):
  Lag Features:
    - high_lag_1 through high_lag_7
    - close_lag_1 through close_lag_7
    - return_lag_1 through return_lag_7
  
  Moving Averages:
    - SMA (7, 14, 30 days)
    - EMA (7, 14, 30 days)
    - Standard Deviation (7, 14, 30 days)
  
  Price Position:
    - price_to_sma_7 (normalized)
    - price_to_sma_30 (normalized)
  
  Volatility:
    - volatility_7 (7-day rolling std of returns)
    - volatility_14 (14-day rolling std of returns)
  
  Technical Indicators:
    - RSI (14-day Relative Strength Index)
  
  Time Features:
    - day_of_week
    - month

Prediction Formula:
  predicted_return = model.predict(features)
  predicted_high_price = current_high * (1 + predicted_return)

Data Source: Yahoo Finance (BTC-USD)
Preprocessing: RobustScaler (handles outliers well)

================================================================================
API ENDPOINTS
================================================================================

Base URL (Local): http://localhost:8000
Base URL (Production): https://your-domain.com

---
1. GET /
---
Description: Returns project information and API documentation

Response Example:
{
  "project": "Bitcoin Price Prediction API",
  "description": "Machine Learning API for predicting Bitcoin HIGH price",
  "endpoints": { ... },
  "model_info": { ... }
}

---
2. GET /health/
---
Description: Health check endpoint to verify API is running

Response Example:
{
  "status": "healthy",
  "message": "Welcome to Bitcoin Price Prediction API!",
  "model_status": "loaded",
  "timestamp": "2025-10-25T12:00:00"
}

---
3. GET /predict/{token}
---
Description: Predict tomorrow's HIGH price for specified cryptocurrency

Parameters:
  - token (path): Token symbol - 'bitcoin', 'btc', or 'btc-usd'

Example Request:
  curl http://localhost:8000/predict/bitcoin

Response Example:
{
  "token": "Bitcoin (BTC-USD)",
  "prediction": {
    "predicted_high_price": 111269.57,
    "predicted_return_pct": -0.3892,
    "prediction_date": "2025-10-26",
    "predicted_change_from_close": "-0.24%",
    "formula": "predicted_high = current_high * (1 + -0.003892)"
  },
  "current_data": {
    "current_close_price": 111537.38,
    "current_high_price": 111704.38,
    "current_date": "2025-10-25"
  },
  "model_info": {
    "model_type": "RandomForest (Return-Based)",
    "features_used": 31,
    "data_source": "Yahoo Finance"
  }
}

---
4. GET /model/info
---
Description: Get detailed model metadata and performance metrics

Response: Model configuration, feature list, and training metrics

================================================================================
INSTALLATION & SETUP INSTRUCTIONS
================================================================================

PREREQUISITES:
--------------
- Python 3.11 or higher
- pip package manager
- Git (for cloning repository)
- Docker (optional, for containerized deployment)

METHOD 1: LOCAL INSTALLATION
-----------------------------

Step 1: Clone the repository
  git clone https://github.com/YOUR_USERNAME/Crypto_Investing.git
  cd Crypto_Investing

Step 2: Create virtual environment (recommended)
  python3 -m venv venv
  source venv/bin/activate  # On macOS/Linux
  # OR
  venv\Scripts\activate     # On Windows

Step 3: Install dependencies
  pip install -r requirements.txt

Step 4: Verify model files exist
  ls -lh models/bitcoin_return_model.pkl
  ls -lh models/bitcoin_scaler_return.pkl
  ls -lh models/feature_columns_return.pkl

Step 5: Run the API server
  uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

Step 6: Test the API
  # Open browser to: http://localhost:8000/docs
  # OR test with curl:
  curl http://localhost:8000/health/
  curl http://localhost:8000/predict/bitcoin

METHOD 2: DOCKER DEPLOYMENT
----------------------------

Step 1: Build Docker image
  docker build -t bitcoin-prediction-api .

Step 2: Run Docker container
  docker run -p 8000:8000 bitcoin-prediction-api

Step 3: Access API
  Open browser to: http://localhost:8000/docs

================================================================================
USAGE EXAMPLES
================================================================================

EXAMPLE 1: Python Requests
---------------------------
import requests

# Get prediction
response = requests.get('http://localhost:8000/predict/bitcoin')
data = response.json()

print(f"Predicted HIGH price for tomorrow: ${data['prediction']['predicted_high_price']}")
print(f"Expected change: {data['prediction']['predicted_change_from_close']}")

EXAMPLE 2: cURL
---------------
# Health check
curl http://localhost:8000/health/

# Get prediction
curl http://localhost:8000/predict/bitcoin | json_pp

# View API documentation
curl http://localhost:8000/

EXAMPLE 3: JavaScript/Node.js
------------------------------
const axios = require('axios');

async function getBitcoinPrediction() {
  const response = await axios.get('http://localhost:8000/predict/bitcoin');
  console.log('Predicted HIGH:', response.data.prediction.predicted_high_price);
  console.log('Current HIGH:', response.data.current_data.current_high_price);
}

getBitcoinPrediction();

EXAMPLE 4: Interactive API Documentation
-----------------------------------------
1. Start the API server
2. Open browser to: http://localhost:8000/docs
3. Click on any endpoint to expand
4. Click "Try it out"
5. Enter parameters (if required)
6. Click "Execute"
7. View response

================================================================================
API TESTING
================================================================================

Automated Test Script:
----------------------
python test_api.py

This will test all three endpoints and display results.

Manual Testing:
---------------
1. Health Check:
   curl http://localhost:8000/health/
   Expected: Status 200, "healthy" response

2. Root Endpoint:
   curl http://localhost:8000/
   Expected: Project information and documentation

3. Prediction Endpoint:
   curl http://localhost:8000/predict/bitcoin
   Expected: Prediction with current and future price data

================================================================================
PROJECT STRUCTURE
================================================================================

Crypto_Investing/
├── app/
│   ├── __init__.py
│   └── main.py              # FastAPI application (main entry point)
├── models/
│   ├── bitcoin_return_model.pkl         # Trained RandomForest model
│   ├── bitcoin_scaler_return.pkl        # RobustScaler for features
│   ├── feature_columns_return.pkl       # List of 31 features
│   └── model_metadata_return.pkl        # Model performance metrics
├── data/
│   ├── raw/                 # Raw Bitcoin price data
│   └── processed/           # Engineered features
├── notebooks/
│   ├── bitcoin_data_collection.ipynb           # Data fetching
│   ├── bitcoin_feature_engineering.ipynb       # Feature creation
│   └── bitcoin_model_RETURN_BASED_FIXED.ipynb  # Model training
├── Dockerfile               # Docker configuration
├── requirements.txt         # Python dependencies
├── test_api.py             # API test suite
└── README.md               # Project documentation

================================================================================
MODEL TRAINING (FOR DEVELOPERS)
================================================================================

To retrain the model with new data:

Step 1: Collect new data
  jupyter notebook notebooks/bitcoin_data_collection.ipynb
  # Run all cells to fetch latest 2 years of data

Step 2: Engineer features
  jupyter notebook notebooks/bitcoin_feature_engineering.ipynb
  # Run all cells to create 31 features

Step 3: Train model
  jupyter notebook notebooks/bitcoin_model_RETURN_BASED_FIXED.ipynb
  # Run all cells to train RandomForest model
  # Model files will be saved to models/ directory

Step 4: Restart API
  # API will automatically load new model files

================================================================================
TROUBLESHOOTING
================================================================================

Problem: "Model not loaded" error
Solution: Verify model files exist in models/ directory
  ls -lh models/bitcoin_return_model.pkl

Problem: API returns 500 error on prediction
Solution: Check if Yahoo Finance is accessible
  curl https://finance.yahoo.com

Problem: Port 8000 already in use
Solution: Kill existing process or use different port
  lsof -ti:8000 | xargs kill -9
  # OR
  uvicorn app.main:app --port 8001

Problem: Import errors when starting API
Solution: Reinstall dependencies
  pip install -r requirements.txt --force-reinstall

Problem: Docker build fails
Solution: Ensure all model files are present before building
  ls -lh models/*.pkl

================================================================================
PERFORMANCE & LIMITATIONS
================================================================================

Current Limitations:
- Only supports Bitcoin (BTC-USD) predictions
- Predicts only next day's HIGH price (not low, open, close)
- Requires internet connection to fetch latest data from Yahoo Finance
- Model trained on 2 years of data (may need retraining as market evolves)
- Does not account for major market events or news

Performance Characteristics:
- Prediction latency: ~2-5 seconds (includes data fetching)
- Model inference time: <100ms
- Data fetching time: ~1-3 seconds from Yahoo Finance
- Memory usage: ~150MB (with model loaded)

Future Improvements:
- Support for multiple cryptocurrencies
- Predict all OHLC values (not just HIGH)
- Add confidence intervals for predictions
- Real-time streaming predictions
- Historical prediction accuracy tracking
- Integration with multiple data sources

================================================================================
DEPENDENCIES
================================================================================

Core Libraries:
- fastapi==0.104.0         # Web framework
- uvicorn[standard]==0.24.0 # ASGI server
- pydantic==2.4.0          # Data validation

Data & ML:
- pandas==2.1.0            # Data manipulation
- numpy==1.24.0            # Numerical computing
- scikit-learn==1.3.0      # Machine learning
- yfinance==0.2.32         # Data fetching
- joblib==1.3.0            # Model serialization

Utilities:
- requests==2.31.0         # HTTP requests
- python-dotenv            # Environment variables

See requirements.txt for complete list with version constraints.

================================================================================
LICENSE & ATTRIBUTION
================================================================================

License: See LICENSE file in repository

Dataset: Historical Bitcoin prices from Yahoo Finance (BTC-USD)
API Framework: FastAPI (https://fastapi.tiangolo.com/)
ML Library: scikit-learn (https://scikit-learn.org/)

================================================================================
CONTRIBUTING
================================================================================

To contribute to this project:

1. Fork the repository
2. Create a feature branch
   git checkout -b feature/your-feature-name

3. Make your changes and commit
   git commit -m "Add your feature description"

4. Push to your fork
   git push origin feature/your-feature-name

5. Create a Pull Request on GitHub

Please ensure:
- Code follows PEP 8 style guidelines
- All tests pass (run: python test_api.py)
- Add tests for new features
- Update documentation as needed

================================================================================
SUPPORT & CONTACT
================================================================================

For issues, questions, or feature requests:
1. Open an issue on GitHub: https://github.com/afraz-rupak/Crypto_Investing/issues
2. Check existing issues for similar problems
3. Provide detailed description and error messages
4. Include system information (OS, Python version)

For general inquiries: See repository README.md

================================================================================
DEPLOYMENT TO PRODUCTION
================================================================================

OPTION 1: Deploy to Heroku
---------------------------
1. Install Heroku CLI
2. heroku login
3. heroku create bitcoin-prediction-api
4. git push heroku main
5. heroku open

OPTION 2: Deploy to AWS EC2
----------------------------
1. Launch EC2 instance (Ubuntu 22.04 recommended)
2. SSH into instance
3. Clone repository
4. Install Docker: sudo apt install docker.io
5. Build and run: docker build -t api . && docker run -p 80:8000 api

OPTION 3: Deploy to Google Cloud Run
-------------------------------------
1. Install gcloud CLI
2. gcloud builds submit --tag gcr.io/PROJECT_ID/bitcoin-api
3. gcloud run deploy --image gcr.io/PROJECT_ID/bitcoin-api --platform managed

OPTION 4: Deploy to DigitalOcean
---------------------------------
1. Create Droplet (Ubuntu)
2. Clone repository
3. Install dependencies
4. Run with systemd service or supervisor

Environment Variables for Production:
- Set ENVIRONMENT=production
- Configure logging level
- Set up monitoring and alerts
- Use reverse proxy (nginx) for HTTPS

================================================================================
VERSION HISTORY
================================================================================

v1.0.0 (2025-10-25)
- Initial release
- RandomForest return-based prediction model
- FastAPI REST API with 3 endpoints
- Docker support
- 81.5% prediction accuracy

================================================================================
ACKNOWLEDGMENTS
================================================================================

This project was developed as part of Advanced Machine Learning Applications
coursework. Special thanks to:
- Yahoo Finance for providing free Bitcoin price data
- FastAPI framework developers
- scikit-learn community
- Open source contributors

================================================================================
QUICK START SUMMARY
================================================================================

For the impatient:

1. git clone https://github.com/afraz-rupak/Crypto_Investing.git
2. cd Crypto_Investing
3. pip install -r requirements.txt
4. uvicorn app.main:app --reload
5. Open http://localhost:8000/docs

Done! Start making predictions.

================================================================================
